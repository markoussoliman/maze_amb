#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 87 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 66 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 3224 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Project Scope: Non-deterministic computing "
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Project"
0 0 17 3 6 #" Name:"
0 0 17 3 13 #" Maze Solver "
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; College:"
0 0 17 3 1 #" "
0 0 17 3 4 #"City"
0 0 17 3 1 #" "
0 0 17 3 7 #"College"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"New"
0 0 17 3 13 #" York  (CUNY)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Semester: Fall 2015"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; Class:"
0 0 17 3 1 #" "
0 0 17 3 3 #"CSc"
0 0 17 3 1 #" "
0 0 17 3 5 #"33500"
0 0 17 3 2 #" ("
0 0 17 3 11 #"Programming"
0 0 17 3 20 #" Language Paradigms)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Instructor:"
0 0 17 3 1 #" "
0 0 17 3 25 #"Professor Douglas Troeger"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Students:"
0 0 17 3 1 #" "
0 0 17 3 7 #"Markous"
0 0 17 3 1 #" "
0 0 17 3 7 #"Soliman"
0 0 17 3 1 #" "
0 0 17 3 21 #"& Moustafa ElShaabiny"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #"; DEFINITIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; Maze: It's represented as a scheme-tree (list of lists)  ---> '((."
 #".) (..) (..)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Position: It's represented as a pair of non-negative numbers  --->"
 #" (0 1) (5 4) (13 11)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; LOADING FILES & FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"only"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 6 #"random"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; It's required to include random if you wish to use \"Random functi"
 #"ons\" while using \"R5RS\""
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; \"Pretty Big\" already includes random functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; (create-maze row column)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Pre-condition: This function accepts any integers > 1 as its row a"
 #"nd column parameters"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; Post-conditions: This function outputs a random maze full with (0,"
 #" 1, 2) representations"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Numbers' representations"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; ------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";                           0 --> Valid Step"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                           1 --> Wall/Border"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                           2 --> place holder for wall"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; (create-maze-visualized row column)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Pre-condition: This function accepts any integers > 1 as its row a"
 #"nd column parameters"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Post-conditions: This function outputs a random maze fullly visual"
 #"ized with colored boxes."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Here's the keymap to the colors "
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; -------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";                                    "
0 2          23 17 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           6 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\246\0\0\0f\b"
 #"\6\0\0\0A`\352\303\0\0\t\321IDATx\234\355\235\275n\352\312\36"
 #"\305\327\\\345I\356\301)\20O`?\201I\223*\322\256\322\r%4\273\243\244"
 #"Kc\227\270;\325\226\250h\260\237 "
 #"\226\356\325-\21\5\36\316\253\314-\306"
 #"\37cc\233\217\20<\301\377\237\204\264"
 #"\215\361x\2\213\371`\317\232\305\366\342"
 #" A\20\206\361\4\0\326_\377\356\272\36\4\1\0`\214\1\0\376\325q=\b"
 #"\242\26\22&a$$L\302HH\230\204\221\2200\t#\351\2110#L\30\3"
 #"c\23D\3513\302w\300\30\3\233D\255W\22\335\320\23aV\20>\336g1"
 #"\0\216p\351v]\e\242\206\36\nS\300\177\237!\206\r/Y\302\325\237w\230"
 #"jE\31\3c\16|\241?\237\35\3y\v\354\370\20\245\242}8\214\301\361\243"
 #"RY\223\b\210&\345\343\234h\242\335"
 #"\223\301\311o\242\356QWV/\330\213\203||B\311\1\tp\3119$\0\311"
 #"C\375|\"=[\235\317\236\16yq\234x\266\4 m/\311N\226\217\363b"
 #"<i\3\22\260\245\227\350\307\331k\213z\204\331\353mO&\265u\310^\233]"
 #"\233\235O\313~P\220\376\315=\23f\366(\4(\245,\4\244\2535\25\237z"
 #"*\275>\25\221\22m\215@\262r\32"
 #"\305\326r\355\321\271\362=U\361v\315"
 #"\227\352\261\310>\243\236u\345\34a\310"
 #"\1\4\30\353\335p\262C\f\0\301\270\350V\307\201v\235\213W\16 ^a#"
 #"\4\366[\0\366\e^\6_\257\221\336\305\227n\331\302v/N\277\350\207\3233"
 #"a\2p\227\b9\200x\206w\277\374\1\333^\2)e\351\221\315\215\\\245L"
 #"\314\336\337\261\212\1\373\355\5_\325\245\360\35"
 #"\214\3\200\207\352^!?\357\272\321\363\r\276\21"
) 500
(
 #"\206\323?a\2p\227!\2246\337\325\204\306}M\217?\3208\267p\177\303\263"
 #"\1\3041b\330x\273Es\t\0\2601\264\0 \302\272\256\305\314\277@\21>"
 #"\322_\22^{\360CB/\205\t\270X\206Y\v\350C\300\305R\206\340\b0"
 #"f\372\314|\242\tu\200\2277[\375"
 #"\363F\335\370`:\aG\214\231\305\300\330\30\3405M\246\3151ZY`l\214"
 #"\0\0\17\365_\22\36\230~L~nD\323l\374{nv4\371\351\3\350\347"
 #"\344\347kDi_\333\2071^\327\260\2758\310G_(\234->}$T\343"
 #"\362xd\237\325S\307\365\270\v\217\372!>2O\0\220\34\376\351\272\36\4Q"
 #"\242\23\317Or\370\207|FD+4\371!\214\204\204I\30\t\t\2230\22\22"
 #"&a$$L\302HH\230\204\221\2200\t#!a\22FB\302$\214\204\204"
 #"I\30\t\t\2230\22\22&a$$L\302HH\230\204\221\2200\t#!a"
 #"\22FB\302$\214\204\204I\30\311\23"
 #"\320\215\213p/\16w\277'\361s\350\314%I\236\37\242\r\352\312\t#!a"
 #"\22FB\302$\214\244\367\302\214&\224"
 #"\\a\"\17)\314\252\330\232\305\247\366"
 #"\244\344\367\334p2\232\34\207\n\20Gt.L\341;\215\351\17U-\325\276\366"
 #"+Dk\4\266\207\337.p\234ZQ\335\37\223\270'\235\vs\360\362\6;^"
 #"a\243\253-\335\23=X\227e\221\354"
 #"\342\233l1\235\21\255\203\243\362\212\355"
 #"\256\23xv\2001u\363\235\320\27101x\301\233\35c\245)3Z\a\2609"
 #"\207\35\254\265\26+\302:\320\266\230N"
 #"[\325\353\363o*\345\35WL\355 \274\335k-t\265U\235\224\3527a\16"
 #"|\177R>W\252\247\3\177_\275\317\25e\366\200\356\205\231\n"
 #" \336%\351q*\230\337\257\30!@\336hFk\4\30A\355\231"
) 500
(
 #"\32a\362\16\374\235n\340\237x6\202"
 #"\305\205]|\264F\320\272e\265\300f"
 #"\245\267\320\2\276ca6\n\363\340\200"
 #"\304\333b\\\22K\214\331\f\b\245\204"
 #"\224K\270i\330\25\362Vx\216\335\254"
 #"\274\321z4\251)\2634\\\251\226\331"
 #"\23\366\342\240\345\337\334\357Q\"\344\265"
 #"\241L!/\266\225N<\273\234\303\243"
 #"\223x\322\256f\351h\257\255\36g\371"
 #";\345-\253\263L\36\375\241\345\361T"
 #"\356\221\226,y%\227\247|\233\232kB^l_\235x\322>\312\3749Q\346"
 #"\203\223\275\367\6\264\230HS#T\353(6+\304\243g\f\240\"L\342\325\6"
 #"\"m\275\364\331s\36R\312\30\2305S9=\347\"6X\305\365\335x)R"
 #"%\34af\245Q}Y\26P\t\vC;F\336\330W\251\275\246J\26\16\220"
 #"=T\b@\3371C\230i\300\323v/\220\3544\1\272\257\340\361\n\233h\203"
 #"U\254\305\210D\23X\263Q\332\275I"
 #"\310\304\203}\301\335\304f\205\230\3171"
 #"=5\213r_\301\221\n\317\32\326\334#\301.\316\342Pj\250\275\246\n/\376"
 #"\216\374\361y\272n\17\216!\302\314Z\307w,\2=\307F\265H\253\305\n1"
 #"\177m\34_E\37\227\264\230\307\255o#\321\32A\226\3033x\301[e\226."
 #"\374E\3738u\360\214\21\2,\262\240"
 #"+\341\303\321\343\317\3222\27>\375\252y\204\21cL)eS|HS~b"
 #"\310\213\262l\317\223\374\3341f\355XQ\312\3721f\365\276\225L\312R]\e"
 #"\306\203Z\320)\300eX\n6m\270o~\276\277cL\266\27\a\371<\370\353"
 #"{T\337\202\354h\303~\341;\260vsH\312)7\222lm\2601]\371}"
 #"\270\240\e':\245\27q*\5\3L?)Z\345'\320\263\26\223\370"
 #")t\326bR\266\20\321\306\23p\377\211\b\345\374\20\247\240\256\2340"
) 500
(
 #"\22\22&a$$L\302HH\230\204\221<\2040/6\224\221\357\306x:\27"
 #"\246Z\276V\2672[\255\354\276\306\331"
 #"\20M\330\315\205'|\207\334\224w\244sa\16\246\363|-f\211\350\0033}"
 #"\251\333\5\270K\t\3719\275\2317\210\270?\235\v3[\213Y5\236E\312W"
 #"[,u\273\300\343s\324\265\237\364\335\350/\325\26 3\a\276P-\2675\213"
 #"\201`\f\306\30\234|\231Z\233_G\300w\34\370\"\302\244T\336EoN\177"
 #"\331\213\303\335\2276\35\335S\267V\250"
 #"'*\313\275B\311\265\245b\211g\227"
 #"\226\234\265[)\2526\212\372\345ui"
 #"\301\rK\342\352\255\35\325\373\226\353\225"
 #"-g+\254\23j\t_}\371\204\2\246Z+\0T\374\336\0\340b\251u\315"
 #"\312\362\273C\223\243\241\204P\253\337\347"
 #"\371\222p\27\313\220\267\\P3\254\250"
 #"-\327\307\"\260\341\25\225T\303\222\212"
 #"\25\231\207\305jt5l\331bO\255"
 #"\346I\314\20&\\\374\366\354\274;\257"
 #"\363{_\355\3619\313w\2232\230\342"
 #"3\361\260\35\263J\227\335\3045~\235"
 #"\26\217\20\221c\2100\323V0X\300"
 #"\0275~\357\257x|\316\362\335\350\25\231\342SJH\31b4\263N\374*p"
 #"\215_\247\305#D\344\30#\314|\343"
 #"\203\367\23>\32\\\350\3619\345\273i"
 #"\304\302\260\252h}\363\2033\375:\301"
 #"\270\230\360\234\364\b\21\5FL~R"
 #"\232\374=R~\301\343\243\n>\341\273\311/,{o\32\312(&Rm~\35"
 #"u\216\207\272O\210&>\247\200\356\371\271\367\22\264~,{S;w\354\346\22"
 #"d/:\237\236z~\210\237\2\t\223"
 #"0\222\236\231\321\356\t\31\337\276\302\23"
 #"\0\374\371\363\247\353z\20D\t\312"
 #"\371!\214\204\306\230\204\221\2200\t#!a\22FB\302"
 #"$\214\344G\b\363\276!Q\327[:2N\326\367\346\236"
) 500
(
 #"#m\301\262a^\246\3633\227\312\320\357\230\217@jC\t\37(<\340G\264"
 #"\230\304\31\330C<\322j:\3\204y\2057\246\315\377\323x\256\315\237SG["
 #"}.,\353\e\263~\204\357\200\215\3 \236\301bz7\371\3052\36575\232"
 #"\324\\\257\275\267_\316\\:\306\0a\2j%\370\2\303$\313\272\1fV\323"
 #"\207\335\226\361\23ab\351\271:!\220"
 #"\236;\235\247S&\30\27\365\ty\214"
 #"\331\207\376\201\237\312\373\321\371\336\254\237"
 #"\301\364\0232\344\200\355!\2212\335)"
 #"\371\232L\"\255\314\227\267R\370\227\330"
 #"\3\266\255YN\304\36[d\16\326\ed.\325`\2100/\361\306\264\370\177\242"
 #"5\2T\374=\237S\f\316\364\3474\325\307U\221\32\352\315N=D\341\262R"
 #"VS}Oy\216\316\366\16]0~<\263\216\215e\246\213\253\225\20\0056+"
 #"`>\347\330\246\27\253\324\217\314\301\372"
 #"\5?V\v\306\b\363\230foL\253\377\247q\254u\243<\235K\363~\272\310"
 #"\372\271&\223\250D\21o\3$\330\215^\341ZC\340;2\227\0320X\230\r"
 #"\336\230S\376\237\306o\353\215\362t."
 #"\315\373\351\"\353\347\232L\242\ny\370W\264\306vh)+\tV\330\210\4\273"
 #"\ef.5a\2140\257\365\306\224\374?\251\r\270\360\341D\2308>\304-\363"
 #"t.\315\373\351\"\353\347\232L\242*"
 #"i\370\327\307z\213\321\363\0\300\0\317"
 #"\243\30\273\2175\202\233e.5c\2140y8\307.\355\316\254\331\ba\323\26"
 #"/\356\22!\0170N\273\216\305\320C1bs\261T3\247\264kY`\370\367"
 #"\24\3\f0\375L\360\266\262\264\356\362"
 #"\332\37\243\a\230~\206\340\351\256\34\214"
 #"1X\2537$\215[\322T\352d\3550/\265*\267\254\333\265u"
 #"\254\257\367+\217\21\4#\24Au\34A\20\224S?Z?\217\353a"
) 70
(
 #"{q\220\377\373\357\177nP\324e\374"
 #"\372\365+\375\27yc\210\2\362\374\20FC\302$\214\304\200\377+'o\fq"
 #"LgY\222\4\321\6u\345\204\221\374\37\2625`"
 #"\311\235\315\206\223\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; HELPER FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Function name: random-odd"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Pre-condition: It takes a positive integer (length)."
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; Post-condition: It returns a random odd number between zero and th"
 #"e given positive integer."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"random-odd"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"that-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"choice"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 11 #"that-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 4 #"odd?"
0 0 24 3 1 #" "
0 0 14 3 6 #"choice"
0 0 24 3 2 #") "
0 0 14 3 6 #"choice"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"random-odd"
0 0 24 3 1 #" "
0 0 14 3 11 #"that-length"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Function name: change-value-in-list"
0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #"; Pre-condition: It takes a list of atoms, an index to an element in"
 #" the list and the new value (non-negative integer)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 117
(
 #"Post-condition: It outputs the list with the new value changed inste"
 #"ad of the old one at a certain index in the list."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"change-value-in-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 5 #"value"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 20 #"change-value-in-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Function name: change-value-in-maze"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #"; Pre-condition: It takes a maze, a valid position in the maze and t"
 #"he new value (non-negative integer)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 121
(
 #" Post-condition: It outputs the maze with the new value changed inst"
 #"ead of the old one at a certain position in the maze."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"change-value-in-maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #")) "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #")) "
0 0 14 3 5 #"value"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Function name: position"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Pre-condition: It takes an element(atom) and a list"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Post-condition: It outputs the position of the element in the list"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";                 First element in the list --> position = 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"NOT FOUND!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Function name: maze-length"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #"; Pre-condition: It takes a maze as its only parameter. (Refer to De"
 #"finitions section for the definition of \"maze\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Post-condition: It returns the length of the given maze."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"maze-length"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Function name: maze-width"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #"; Pre-condition: It takes a maze as its only parameter. (Refer to De"
 #"finitions section for the definition of \"maze\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Post-condition: It returns the width of the given maze."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"maze-width"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Function name: remove-last"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Pre-condition: It takes a list of atoms as its only parameter. "
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Post-condition: It returns the list with the last element removed."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"remove-last"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 11 #"remove-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Function name: remove-last-in-maze"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Pre-condition: It takes a maze as its only parameter. "
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"; Post-condition: It returns the maze with the last element of each "
 #"list inside the maze removed."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"remove-last-in-maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #")) ("
0 0 14 3 19 #"remove-last-in-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; Function name: last-element-position"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; Post-condition: It outputs the position of the last element in the"
 #" given maze."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"last-element-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 21 #"last-element-position"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Function name: multisubst"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #"; Pre-condition: It takes a list of atoms, an old value (non-negativ"
 #"e integer) and a new value (non-negative integer)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 92
(
 #"Post-condition: It changes all the occurences of the old value in th"
 #"e list to the new value."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 3 #") ("
0 0 14 3 10 #"multisubst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Function name: build-single-row"
0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #"; Pre-condition: It takes a positive integer (m) for the length of t"
 #"he row, an integer that represents the boundary value,"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";                an"
0 0 17 3 1 #" "
0 0 17 3 7 #"integer"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 10 #"represents"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"even"
0 0 17 3 1 #" "
0 0 17 3 5 #"value"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 59
#"maze, an integer that represents the odd value in the maze."
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; Post-condition: It outputs a list of integers as a single row in t"
 #"he maze --> (1 0 1 0 2 0 1)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"build-single-row"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 8 #"boundary"
0 0 24 3 1 #" "
0 0 14 3 8 #"even-val"
0 0 24 3 1 #" "
0 0 14 3 7 #"odd-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"iterative-call"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")) "
0 0 14 3 8 #"boundary"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 4 #"odd?"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 14 3 7 #"odd-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 8 #"even-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 14 #"iterative-call"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"iterative-call"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; Function name: setup-initial-maze"
0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; Pre-condition: It takes a positive integer (m) for the length of t"
 #"he row, a positive integer (n) as the length of the maze. "
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; Post-condition: It outputs a maze with all walls and valid steps a"
 #"re generated --> ((1 1 "
) 0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #")("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #")("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1 "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 5 #"1 1 1"
0 0 17 3 17 #"))               "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"setup-initial-maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"iterative-call"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"build-single-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 4 #"odd?"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 3 #") ("
0 0 14 3 16 #"build-single-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"build-single-row"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 14 #"iterative-call"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"iterative-call"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Function name: initialize-maze-dimensions"
0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #"; Pre-condition: It takes a positive integer for the length of the m"
 #"aze and a positive integer for the width of the maze. "
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; Post-condition: It outputs a maze with all walls and valid steps a"
 #"re generated --> ((1 1 "
) 0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #")("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #")("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"1 "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 10 #"1 1 1))   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"initialize-maze-dimensions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"maze-length"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"maze-width"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"setup-initial-maze"
0 0 24 3 1 #" "
0 0 14 3 11 #"maze-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"maze-width"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Function name: split-maze"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Pre-condition: It takes a maze as its only parameter. "
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Post-condition: It outputs a list of two split mazes (horizontally"
 #" or vertically)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"split-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"make-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 5 #"))) ("
0 0 14 3 13 #"make-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 15 #"make-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"make-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Function name: even-no-ends"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Pre-condition: It takes a positive integer as its only parameter. "
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #"; Post-condition: It outputs a random even number (n) between 0 and "
 #"the length. (0 < n < length)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"even-no-ends"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 11 #"that-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"choice"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 11 #"that-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"even?"
0 0 24 3 1 #" "
0 0 14 3 6 #"choice"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 6 #"choice"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 6 #"choice"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"that-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))) "
0 0 14 3 6 #"choice"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"even-no-ends"
0 0 24 3 1 #" "
0 0 14 3 11 #"that-length"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Function name: replace-maze-by-horizontal"
0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #"; Pre-condition: It takes a maze and a positive integer as the row n"
 #"umber where the horizontal split will take place."
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Post-condition: It outputs a maze with the given row changed to a "
 #"list 1s."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"replace-maze-by-horizontal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"row-length"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"process-that"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"process-that"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"process-that"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 10 #"row-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Function name: replace-maze-by-horizontal"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #"; Pre-condition: It takes a maze and a positive integer as the colum"
 #"n number where the vertical split will take place."
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; Post-condition: It outputs a maze with the given column changed to"
 #" a list 1s."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"replace-maze-by-vertical"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-length"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"process-that"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"process-that"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"just-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"process-that"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 13 #"column-length"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Function name: make-horizontal"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Post-condition: It outputs a list of two horizontally-split mazes."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"make-horizontal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 12 #"even-no-ends"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 26 #"replace-maze-by-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"split-that"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"row"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Function name: make-vertical"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; Post-condition: It outputs a list of two vertically-split mazes."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"make-vertical"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"column"
0 0 24 3 2 #" ("
0 0 14 3 12 #"even-no-ends"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" (( "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 24 #"replace-maze-by-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"split-that"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"column"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Function name: split-that"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #"; Pre-condition: It takes a maze, a positive number that represents "
 #"the wall, and the orientation of the split."
) 0 0 24 29 1 #"\n"
0 0 17 3 123
(
 #"; Post-condition: It outputs a list of two horizontally-split mazes "
 #"or vertically-split mazes depending on the orientation."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"split-that"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"wall"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 21 #"last-element-position"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 26 #"make-small-maze-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"wall"
0 0 24 3 3 #") ("
0 0 14 3 26 #"make-small-maze-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"wall"
0 0 24 3 1 #" "
0 0 14 3 21 #"last-element-position"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 21 #"last-element-position"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 24 #"make-small-maze-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"wall"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 24 #"make-small-maze-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"wall"
0 0 24 3 1 #" "
0 0 14 3 21 #"last-element-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Function name: make-small-maze-horizontal"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Pre-condition: It takes a maze, a positive number that represents "
 #"the begin point,"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";                a positive number that represents the end point"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"; Post-condition: It outputs a list of smaller horizontal maze from "
 #"the begin to the end points. "
) 0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"make-small-maze-horizontal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 3 #") ("
0 0 14 3 26 #"make-small-maze-horizontal"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Function name: make-small-maze-vertical"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Pre-condition: It takes a maze, a positive number that represents "
 #"the begin point,"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";                a positive number that represents the end point and"
 #" a length."
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #"; Post-condition: It outputs a list of smaller vertical maze from th"
 #"e begin to the end points."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"make-small-maze-vertical"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 18 #"split-list-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 3 #") ("
0 0 14 3 24 #"make-small-maze-vertical"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; Function name: split-list-in-maze"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Pre-condition: It takes a maze, a positive number that represents "
 #"the begin point,"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";                a positive number that represents the end point and"
 #" a length."
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Post-condition: It outputs a list from the begin to the end points"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"split-list-in-maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 15 3 5 #"begin"
0 0 24 3 3 #") ("
0 0 14 3 18 #"split-list-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Function name: open-hole-horizontal"
0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; Pre-condition: It takes a maze and a positive integer as the row n"
 #"umber where the horizontal split took place."
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; Post-condition: It outputs a maze with one of the values in the gi"
 #"ven row changed to 0."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"open-hole-horizontal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 14 3 10 #"random-odd"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; Function name: open-hole-vertical"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #"; Pre-condition: It takes a maze and a positive integer as the colum"
 #"n number where the horizontal split took place."
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Post-condition: It outputs a maze with one of the values in the gi"
 #"ven column changed to 0."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"open-hole-vertical"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"random-odd"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #")) "
0 0 14 3 6 #"column"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Function name: append-horizontal"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Post-condition: It outputs an appended maze with the hole in the h"
 #"orizontal wall."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"append-horizontal"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"choice"
0 0 24 3 2 #" ("
0 0 14 3 21 #"last-element-position"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 11 #"remove-last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 1 #";"
0 0 17 3 6 #"     ("
0 0 17 3 50 #"display \"APPEND-HORIZONTAL : MAZE WITHOUT HOLE\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 1 #";"
0 0 17 3 23 #"     (display new-maze)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 1 #";"
0 0 17 3 25 #"     (display \"\\nDONE\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 1 #";"
0 0 17 3 20 #"    (display choice)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 20 #"open-hole-horizontal"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 6 #"choice"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Function name: append-vertical"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; Post-condition: It outputs an appended maze with the hole in the v"
 #"ertical wall."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"append-vertical"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 10 #"small-maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 39 #"display \"\\n------------------------\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 17 #"display \"maze\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 19 #"display small-maze)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 7 #"display"
0 0 17 3 27 #" \"\\nremove last in maze\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 7 #"display"
0 0 17 3 23 #" (remove-last-in-maze ("
0 0 17 3 17 #"car small-maze)))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 19 #"display \"\\ncadr\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 17 #"cadr small-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 39 #"display \"\\n------------------------\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"choice"
0 0 24 3 2 #" ("
0 0 14 3 21 #"last-element-position"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 19 #"remove-last-in-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-maze"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 10 #"small-maze"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 48 #"display \"APPEND-VERTICAL : MAZE BEFORE HOLE : \")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 17 #"display new-maze)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 42 #"; (display \"\\n------------------------\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"open-hole-vertical"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 1 #" "
0 0 14 3 6 #"choice"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Function name: random-begin-end"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; Post-condition: It outputs a maze with the begin point and the end"
 #" point are randomly picked."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"random-begin-end"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"maze-begin"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"random-odd"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 10 #"maze-begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"random-odd"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 5 #")))) "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; MAIN MAZE FUNCTION"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Function name: maze-builder"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #"; Post-condition: It outputs the maze built with all the walls and v"
 #"alid steps (ready to be solved)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"maze-builder"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 12 #"initial-maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";    (display \"car:\")"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";    (display (car initial-maze))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";    (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";    (display \"cadr:\")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";    (display (cadr initial-maze))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";    (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 3 #"; ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 4 #"MAZE"
0 0 17 3 1 #" "
0 0 17 3 6 #"BEFORE"
0 0 17 3 5 #" : \")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 3 #"; ("
0 0 17 3 21 #"display initial-maze)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"initial-length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 23 #"display initial-length)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 2 #" ("
0 0 14 3 10 #"split-maze"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 6 #"length"
0 0 17 3 2 #" ("
0 0 17 3 6 #"append"
0 0 17 3 2 #" ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 12 #"initial-maze"
0 0 17 3 3 #") ("
0 0 17 3 21 #"cadr initial-maze))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 21 #"display initial-maze)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 15 #"display \"car:\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 18 #"car initial-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 16 #"display \"cadr:\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 19 #"cadr initial-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 10 #"maze-width"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 11 #"maze-length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 10 #"maze-width"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 11 #"maze-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 14 #"initial-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 2 #";("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 25 #"small enough vertical: \")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 15 #"append-vertical"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 10 #"display f)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 20 #"display \"DONE SM\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"\""
0 0 17 3 5 #"small"
0 0 17 3 23 #" enough horizontal : \")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 17 #"append-horizontal"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 10 #"display m)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 12 #";  (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 20 #"display \"DONE SH\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 10 #"maze-width"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 15 #" \"Vertical : \")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 18 #"car initial-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 19 #"cadr initial-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 19 #"display \"DONE V\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 15 #"append-vertical"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #") ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 13 #"display temp)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 21 #"display \"\\nDONE V\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 4 #"temp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 11 #"maze-length"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 17 #" \"Horizontal : \")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 18 #"car initial-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 2 #" ("
0 0 17 3 19 #"cadr initial-maze))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 19 #"display \"DONE H\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"temp"
0 0 24 3 2 #" ("
0 0 14 3 17 #"append-horizontal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #") ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 13 #"display temp)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 19 #"display \"DONE H\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 4 #"temp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 14 #"initial-length"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 43 #"display \"Not Enough Vertical (CADR < 4)\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 15 #"append-vertical"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 10 #"display f)"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 21 #"display \"DONE NVC\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 43 #"display \"Not Enough Vertical (CADR > 4)\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 15 #"append-vertical"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 10 #"display f)"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 20 #"display \"DONE NV\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 1 #"f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 45 #"display \"Not Enough Horizontal (CADR < 4)\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 17 #"append-horizontal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 10 #"display f)"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 21 #"display \"DONE NHC\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 45 #"display \"Not Enough Horizontal (CADR > 4)\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 17 #"append-horizontal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-maze"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 3 #"; ("
0 0 17 3 10 #"display f)"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 20 #"display \"DONE NH\\n\")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 1 #"f"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Function name: maze-begin-end"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a maze as its only parameter."
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #"; Post-condition: It outputs the maze built with the begin and end p"
 #"oints are randomly chosen."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"maze-begin-end"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-maze"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"random-begin-end"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-maze"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Function name: create-maze"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Pre-condition: It takes two positive numbers as the row and the co"
 #"lumn."
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #"; Post-condition: It generates the maze built with the begin and end"
 #" points are randomly chosen."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"create-maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"the-maze"
0 0 24 3 2 #" ("
0 0 14 3 26 #"initialize-maze-dimensions"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"modified"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-maze"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 16 #"random-begin-end"
0 0 24 3 1 #" "
0 0 14 3 8 #"modified"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; VISUALIZATION FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Function name: maze-visualized"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Pre-condition: It takes a previously-generated maze."
0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; Post-condition: It outputs a maze visualized with colored boxes. ("
 #"Refer to keymap in the beginning of the code)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"replace-all"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"one-list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 106
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0001IDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\0065\25e\272X\306D\27[F-\e\265l\324\262Q\313"
 #"F-\e\265l\324\262!`\31\0X\320\4+\213v.\373\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"two-list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 1 #" "
0 0 14 3 8 #"one-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 119
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0>IDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\6Ue%\232[t\373\356=\6&\232\333\202\4F-\e"
 #"\265l\324\262Q\313F-\e\265l\3242\22\1\v\3\3\244\312\246\a"
 #"\0\0?\n\tVPB\377\30\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"multisubst"
0 0 24 3 1 #" "
0 0 14 3 8 #"two-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 106
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0001IDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\2063\247N\322\3052&\272\3302j\331\250e\243\226\215Z"
 #"6j\331\250e\243\226\r\1\313\0\336\334\6\35"
 #"j\357\300\251\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"replace-all"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Function name: create-maze-visualized"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Pre-condition: It takes a previously-generated maze."
0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; Post-condition: It outputs a maze visualized with colored boxes. ("
 #"Refer to keymap in the beginning of the code)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"create-maze-visualized"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"the-maze"
0 0 24 3 2 #" ("
0 0 14 3 26 #"initialize-maze-dimensions"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"column"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"modified"
0 0 24 3 2 #" ("
0 0 14 3 12 #"maze-builder"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-maze"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"last-touch"
0 0 24 3 2 #" ("
0 0 14 3 16 #"random-begin-end"
0 0 24 3 1 #" "
0 0 14 3 8 #"modified"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"replace-all"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-touch"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #"; CALLING MAZE BUILDER "
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"create-maze"
0 0 17 3 1 #" "
0 0 17 3 4 #"4 5)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 22 #"create-maze-visualized"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #"; END OF FILE"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0           0
