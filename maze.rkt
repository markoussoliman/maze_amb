#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 89 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 66 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 3156 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Project Scope: Non-deterministic Computing "
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Project"
0 0 17 3 19 #" Name: Maze Solver "
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; College:"
0 0 17 3 1 #" "
0 0 17 3 4 #"City"
0 0 17 3 1 #" "
0 0 17 3 7 #"College"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 16 #"New York  (CUNY)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Semester: Fall 2015"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; Class:"
0 0 17 3 1 #" "
0 0 17 3 3 #"CSc"
0 0 17 3 1 #" "
0 0 17 3 5 #"33500"
0 0 17 3 2 #" ("
0 0 17 3 31 #"Programming Language Paradigms)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; Instructor:"
0 0 17 3 26 #" Professor Douglas Troeger"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; Students:"
0 0 17 3 1 #" "
0 0 17 3 7 #"Markous"
0 0 17 3 1 #" "
0 0 17 3 7 #"Soliman"
0 0 17 3 22 #" & Moustafa ElShaabiny"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #"; DEFINITIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; Maze: It's represented as a scheme-tree (list of lists)  ---> '((."
 #".) (..) (..)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Position: It's represented as a pair of non-negative numbers  --->"
 #" (0 1) (5 4) (13 11)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; LOADING FILES & FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"only"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 6 #"random"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; It's required to include random if you wish to use \"Random functi"
 #"ons\" while using \"R5RS\""
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; \"Pretty Big\" already includes random functions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"maze-builder.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; This file is a scheme-written code for building mazes"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; its main functions are :"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; (create-maze row column)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Pre-condition: This function accepts any integers > 1 as its row a"
 #"nd column parameters"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; Post-conditions: This function outputs a random maze full with (0,"
 #" 1, 2) representations"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Numbers' representations"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; ------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";                           0 --> Valid Step"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                           1 --> Wall/Border"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                           2 --> place holder for wall"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; (create-maze-visualized row column)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; Pre-condition: This function accepts any integers > 1 as its row a"
 #"nd column parameters"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Post-conditions: This function outputs a random maze fullly visual"
 #"ized with colored boxes."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Here's the keymap to the colors "
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; -------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 39 #"                                       "
0 2          31 17 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0          10 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\1%\0\0\0\313\b"
 #"\6\0\0\0(^\2051\0\0\22\262IDATx\234\355\335?\214\343Hz"
 #"\5\360Gc\242\315\327\0066\271\203\217"
 #"l\3\r\335\341`\30\16\250`\2358\240\24\234\"\1\353\2443*\224\222\1."
 #"P\330\2111\301\222\211\0011\333d\27Pb%\"\3'\6\16b\340\340p\270"
 #"m\b\260\310\36\\dc=\371\246\345\200\244D\261\371O\224F,\211\357\a4"
 #"f\272I\25\2535\3227U%\351\225\262\v_\5\210\210$\361\16\0\264_\375"
 #"m\333\375hE\360\372\361\352\277{\e"
 #"\327\244\333\321\365\307G\360\372\21\177\325"
 #"v'\210\210\322X\224\210H*,JD$\25\26%\"\222\n\213\22\21I\205"
 #"E\211\210\244\302\242DDRaQ\"\"\251\260(\21\221TX\224\210H*,"
 #"JD$\25\26%\"\222\n\213\22\21I\205E\211\210\244\302\242DDRaQ"
 #"\"\"\251\260(\21\221TX\224\210H*\357\332\356@[\24Ei\273\vD\271"
 #"\204\350vl\376; \312\305%\"9t\375\371\330\351\215\3\0\376\257D\362H"
 #"F\357]~>r\343\0\"\222\16\213\22\21I\205E\211\210\244\302\242DDR"
 #"aQ\"\"\251\260(\335=\17\23E\201\242L\340\305?\t\355>\24E\2012"
 #"\361JoI\324\6\26\245\256\tm<\315|\0&\334\205\321vo\210\336`Q"
 #"\352\224\20\366\323\f>tX\301\2F\372\347}%\32=)\n\24\245\17;L"
 #"\377<\371\36\330\217\274\3726\302\243\246"
 #"m\364\25\5}\333;jk\342\1\336"
 #"\344\370\373=o\222\272\246\202\376\376\""
 #"\3215\362\332\242\16\330\205\257\242\213\0"
 #"\b\0mw\343\n\\a\2\0020\205iF\277\263\351\246\217\a"
 #"\302\322\243\343\311\217]\363\360}`\351\2\200\320\255 9x\374\375"
) 500
(
 #"\276\31K\350\200\0ta\5\351\357\223s\17\375p\223\363uK\4\271}H\316"
 #"Mn\233\34\217\333\276S\335yL\26\333\205\257\202#\245\316p\3408\0`b"
 #"\224\236\265\205k,}\0\346h?r2F&\0\a+\17P\247s\230\0\374"
 #"\345\32!\0o\345\0\3201\36\252\371"
 #"\227\321\307\30\252\0\324!\306zt\275\371T\5``d\2\300\vv!\0u"
 #"\212\315f\212\250\25\25\17\275\324\261}"
 #"[\26\276\233\252\0T\f\307:\0\37"
 #"\333\340\374{\202\344\306\242\324\31&\\"
 #"7*6\203\364\324+\330\302\a\0gp\230J\r\234\324\355\342b\342/\261\16"
 #"C\354^p(<gJO\353\216.Y\342\345\250j\321=bQ\352\22c\1"
 #"\327\4\340\317\360d\37?\271u+\200\20\342\350+Y\a\217FN>fOO"
 #"X\372\200>\36\342\334\232\24\332}\f"
 #"\34\300t\243k\271f\275\333\365\36.P\rIj,J\35c,\334h:6"
 #"{\212\26\257\215Q\374\375\a\24\256#\e\357a\351\0|\37~\331\324\355d:"
 #"\0365\0\360\260\312\e)\355\213\247\207"
 #"\17\361+\206#\276`x\367X\224:\307\300\302MF>6B\30X\b\27&"
 #"\34\f\224\364+p\223T\221J\326tp\261\251[\264V\345c\246)P\224\1"
 #"`\346\f\225t\23\275\245\6E\31\300\1`\272\351W\f\351^)\273\360Ut"
 #"1*!\211\211\20\214.\251\307\233@"
 #"\318\320\255\0\233\351\347\236By\230"
 #"(\38\272\205`\277\30~\377\370\230"
 #"dt\t\235\300\213\347W\\\323\241\317"
 #"\215#\245;\377_\351\36c\177\357\365"
 #"\337\254+\217\3112\301\353\307\356ft"
 #"wE\227\37\340t\233:\237\321\335\345"
 #"\337\235\344\324\365\307$\247oW\36I\4\257\37;\235\301L\3058}"
 #"\343B7\21I\210E\211\210\244\302\242DDRaQ\"\"\251\260("
) 500
(
 #"\21\221TX\224\210H*,JD$\25\26%\"\222\n\213\22\21I\205E\211"
 #"\210\244\302\242DDRaQ\"\"\251\260(\21\221TX\224\210H*,JD"
 #"$\25\26%\"\222\n\213\22\21I\205"
 #"E\211\210\244\322\371\214n\\y\267\17\r@\20\276^\365\232t[:\375|\4"
 #"3\272\321J\32r\2073\230\251\0303\272\231\321MD\22bQ\"\"\251\260("
 #"\21\221TX\224\210H*,JD$\25\26\245\23L\0(\231/\357\254\26C"
 #"\330}\5\212\222\376\232\234\331\346\2017"
 #"Q\240\364m\204\27j\357s^;\264"
 #"\373P&\227\372\315\351\226\275k\273\3"
 #"\267(\0\240\2\350\3\30\244\276oJ\267\2l\246*\242\"\245a0\31A,"
 #"\214\263\373i,D;oyh\371\332t\3338R:C/\3763\270X\213*"
 #"\206c\35x\331\245F\30\331\321Tf$\345M2#-e?\342\360&Jj"
 #"\364\21\2653\361<L\366\347\366a\347"
 #"\16eB\330\375>\354\260\354\334\362~"
 #"\325\277vtL\233\371\2003\200\242("
 #"\350\347w\212:\202E\351\f/\361\237\347\217i\22!\326K\37\372x\270\37y"
 #"y\23\r\263\236\v!\4\204\20\b\254"
 #"\27\f\366\323\"\17\223\301\v\254 9\246\3\246[:\312r\6\317x\214\317w"
 #"M\37\263\17ES&\0373\355pn`\0013-)<\321\210\356M\277*\246"
 #"\236\371\327V1\335\244\372.D<j\244\256bQj@C\264\236\344\0030/"
 #"\320\236?\323\342\321\203\206\231\257c<"
 #"\214\237\224\241\215gG\207\365\376Pd"
 #"\324\351\34\246\277\304:\4\20\356\360\202"
 #"\36\36\342\323\325\207^f\224\365\226\351"
 #"n\220<\347\215\221Yz~\372\\u:\207\211\27\354B\0\341\32K\337\204\273"
 #"\310\364+9~\201kSw\261(5\20 \372"
 #"x\212\5\300A\264\0~\16\335\n\366#\16\341\366"
) 500
(
 #"0\323\322S%\0373-=M\32\300I\16\251\17\350\245\n\201\267r\200\336\303"
 #"Y\353[\345|l\3\0\301\26\376\233c\32\36\365\3708\321\31\270\320}\206!"
 #"\200\31\16\323\270\2130F0\341DOn\r\0L\270b\221?E\fwx\201"
 #"\17GS0Cr\356\345&\223o\351x\324\0\340\21:\266\231c\1\266~r"
 #"\234\2509\216\224\316\220\f\n\306\227l"
 #"\324[\301I\236\374\352\20c\335\301s\321\302o\260\205o\36\326uDQ\361j"
 #"\310\31\34Fl\241\375\fG\37c\250\36\3725H\275\204\177t\274)N\347\b"
 #",J\215$kJ\3DkJ\3233\333;\254))P\6Nj\355E\305t"
 #"\23`\274\324\216_]K\26\272\215\5"
 #"\\\f\362\217]\200\351\316\261\215\247\216"
 #"\332\254\aw3\215\247\206*\246\e\27"
 #"\246s\270\266\266\34#\330\37?\235:"
 #"\34C\367g\320\370\352[\3471\272\244"
 #"\215\213_(\232\"\264\373o\212\2017"
 #"Q\360\374\30\234\371\nV\364\352\332v.p\201\267KQM\214.at\311\315"
 #"\v\266~fa;\304\356\242\v\\D\327\307\205\356\ef,\2X}\355(<"
 #"\363\360\356p\242\333\304\351[\e\27\357"
 #"\360\360\234\212q\372\26M\337:\237\321"
 #"\255\254FW\277\346\256\303\3677U\353"
 #"\362\363\21\210\247o]\34)\265\211\367"
 #"7\225\351\362\343\203\v\335D$\35\26"
 #"%\"\222\n\213\22\21I\205E\211\210"
 #"\244\302\242tO\274Ik\361\267D\227"
 #"\302\242t\222\237\200\321\352\355\327\277\375"
 #"\324\260\275\274\214n9?\373\305\314m"
 #"\272\26\276\243\273\211\277\3735\360\257\277"
 #"\272Xs\246+\377g\314\230\271M\327"
 #"\302\221\222\264jdj\2076\372\351c"
 #"\273\262\266\230\271M\267\201EIr"
 #"\305\231\332!\354\247\31\260O\255\234c;sJZb\346"
 #"6\335\6\26\245&\376\373\307\324\232\322\37\200\377=\2579"
) 500
(
 #"gP<B)\314\265\216s\262\347\373'\274\201\205[\236\30\316\314m\272\5\\"
 #"SjB\2065\245\334\234\354S%\231"
 #"\332\25\231\333\34\350\320\25q\244t\253"
 #"\264G\350g7\22\307\356\346\266\305\314"
 #"mj\a\213\322\255R\37\320C*\277;\264\321\37\224\255)1s\233n\3\213"
 #"R\23GkJ\347\274O)r\274\246T\367\325*\3\213h\265:\272\235\266\305"
 #"<\260JGO\314\334\246[\320\371\2207\264\220\247$~\367\357W\276\"3\267"
 #"o\1C\336\30]BD\22bQ\"\"\251\360-\1\235\20\275\241\221\350\26t"
 #">\243\e\243\325\325/\31\204\35\276\277"
 #"\251R\247\237\217\340Bw+\272\274\220"
 #"I\305\270\320\315\205n\"\222\20\213\22"
 #"\21I\205E\211\210\244\302\242\324a\307\31IDr`Q\2723\331BS\\x"
 #"<\254\34\300\34]\361-\336\314\20\247\32X\224Z\24\332\375\267O\3228M2"
 #"[Gr\317=\207\267\202\243[xo\0\371Y\341\345\1oD\237\v\213R\213"
 #"\242\17\255.\261NW\2328'\311Y\35\227\204`\353C\37\17/\26m\344\255"
 #"\2347\355\351\373\24\313\0V&5\200\350ZX\224\332\244\0161\326},SU"
 #"\311[9\320M\23\272\263J\215T<"
 #"\254\34\35\343$G\344(\233\373\355\250"
 #"\252Z\246\275\267\35\303p\254g\242G\3122\274=L\224>l{r|\2542"
 #"C\274A\233t\367X\224Z\25=\371\375(\376\21\373b\361~\204\36\34\354\a"
 #"K\336\n\16zxP\243s&O\300w\373,m\35\316\363\211\323:oU\221"
 #"\225\24b\275L\217\314\352dx\373\230"
 #"\315\0W\b\b\261\200Q#C\334\233\344\264y4E\315\266I\235\260\v_E"
 #"\27\1h\355\353\210k\n\300\24\256\20B\4\226\320uK\4B\b"
 #"\327\204\320\255@D?\326\5L7\377\27\t,\241'\267\217o\227"
) 500
(
 #">7\373\275\20\201\260\364C\333\351\237"
 #"\35\367S\27\373S2\327\210[\26\346\376\34W\230\2008\276L\316m\\S "
 #"\376\375\242\343\251k\324i\363\316\345>"
 #">:f\27\276\n\216\224\332f\214`"
 #"\306\243\242p\275\204\337{\200\212(\210"
 #"\337_\256\21\306\243\226\364\253d\241\335"
 #"?Ly\264\331iY\335\341\32K?\177\352vXS\22\20n\0173-N\252"
 #"\314\315\3Oex\347\251\225!\356c\246\245\247o\3\224ggR\27\260(\265"
 #"\316@\264\21H\210`\233*>\306\b"
 #"\246\277\304\332\213v\32\331\327$o\22\245F&\305\243\"m2+\\/\341\233"
 #"sT\356zd\214`&\e\v4\311\360\256\225!n\36~\217\375\327\246\272o"
 #"t\327X\224$\20\215\212\236\360\354\244"
 #"\212O<\22Y>/\341\233\243\302\365"
 #"\24\357\303)#\245\267\243\256B\336\n"
 #"N\262\261@\223\f\357\252\f\361\270\315"
 #"gF\345R\6\213\222\f\214\21L\337"
 #"\207\257?\3420\360\210\27\301\375L\21"
 #"1\26pM\a\203x\312\363\374h\241|\267\267\22403\352\312\360\223\274oE"
 #"\2012pR\373\2725\311\360\256\312\20"
 #"W1\335\4\30/\265\343\367G\361\315"
 #"\225\235\307\350\222\26\210\226\242)B\273"
 #"\17m;\207`P\267\224\30]\302\350\222\2169a\352F\324\"\306\341v\6#"
 #"q\3516p\244DDRaFw\vx\177S\231\256?>\336\1@\27\27\272"
 #"\23\327^T\f^?v\372\376\246j]~|p\241\233\210\244\303\242DDR"
 #"aQ\"\"\251\260(\21\221TX\224n\334\311\341\377\314\311&\311\261(\265("
 #"\212 \311KT\214\22\31\233\244\321z"
 #"\223\313\177~,\264\373\334\365\204\256\206"
 #"E\251E\352t\276\317R:\342}\300\254\344\203\263e\214\205\200(\375\240"
 #",\221\334X\224Z\25e)e7\t\360\242\275\217\16q%'dr\277"
) 500
(
 #"\231\316U\346d\247OM\205\307)}\330a4b\323f>\20'\4\364\367Q"
 #"#e\371\332!\354~\37v\350ar\324\336Iw\16u\24\213R\313\214\250*"
 #"e6\tH\357\307vN&wuN\366\341T\eO\351\3608\261\301T\215>"
 #"/\27X:`FY\332\2338\201\255V\276\266\366\214\307 9\16\3144\206\377"
 #"S5\26\245\266\245\342p\1d\366c\3\0\3\213\324t,\332\226i\213\242\24"
 #"\332#q~\322|\37\345h`\341\226\245/\345L%s\333\265\361\354\350\260\16"
 #"\235\214\246\242\231\355\242\16yL\311T"
 #"\365\5;\216\226\250\2\213R\353\f\274"
 #"\267\364\375\24.o?\266\306\231\334\265"
 #"r\262c\352\24\233\300\302\313@\311L"
 #"\323\2124\311\327.\311\364&\212\261("
 #"I@\35\216\241;\317\260\303\234\375\330"
 #"\316\311\344\256\225\223\235\356\310\24\e!"
 #" \204\213\336L\253x\365\257I\276vI\2467Q\214EI\6\311\246\224O\25"
 #"\271\32781\223\273*'\273\220\206\307l5KoLY3_\333\31\34\26\267"
 #"+3\275\211b,JRH\345q\3173/\347\237\223\311]\231\223\235\342MR"
 #"S\261h\21;I\315\215\326\261f\320"
 #"\366\323\272z\371\332\246;\3076\236\342"
 #"i\263\36\\\276U\201j\350|F7\243K>\207hG\335\355\\\200q\340\365"
 #"1\243\233\321%D$!\26%\"\222\n7\16\240\317\200\233\24Ps\235\317\350"
 #"\376\341\207\37\332\356\2\321\221.?\37"
 #"\1ft\267\202\3677\225\351\362\343\203"
 #"\v\335D$\35\26%\"\222\n\213\22"
 #"\21I\205E\211\210\244\302\242$\271\223"
 #"3\270\317\322<\2067Q\331\337\213g"
 #"\204\247\302\346$\313\36\317\336\27\327\375"
 #"\267\274]|\237\22\335\2668:\330\25\v\360\23-\367\201#%\272}"
 #"\372#\230\210r?X\224Z\325 \313\272,\257\273\360XY\236v\236\262"
) 500
(
 #"\376\234\330VeFxY{\36&J\37\266=\311\275Vh\367\241\f\34 N"
 #"08L\215\316l3}\247z\223\234"
 #"\333\247\356\333\23\362\323\251\36\26\245\326"
 #"\235\222e]\226\327\355a\242\245\363\270"
 #"] >V\235\247}\314\31\34\372\343\232>f\37\322O\366\234\266\n\vSu"
 #"Fx\255\254\357\31\342@\271\343)\232:\335@\270&\240[\b\204\200X\0305"
 #"\373X\322\346p\f=\225\231\36\356\0"
 #"]O\305\4\207;\274 \331i\346\234\374t*\302\242$\201\372Y\326%y\335"
 #"\336\n\0162y\334\233)\324\232y\332E\3751F\346!\340-\316\374v\27\231"
 #"\266\212\372[\225\21^;\353\373\204\365"
 #"\242\232},l3\16\306\213\212P\210"
 #"\365\22\230\317M\274\3047\16\327K\370\373\235f\316\310O\247B,JR*\316"
 #"\262.\315\353.\\[i\222\247\235#"
 #"7\363[\303\243^\320\337Z\31\341\27"
 #"\352[\323>\276\21m{\25\25\241\0"
 #"\333\336\b\206\366\b,\327\b\21b\275"
 #"\364S;\315\234\221\237N\205X\224\244"
 #"T\220e]\225\327]\370\277t\223<\355\34\271\231\337\1\266~A\177ke\204"
 #"_\250oM\373\230\303\30\231\360\227k"
 #"\204\336\n/\217Z\24\377\213%\326a"
 #"\200mz\223\320s\362\323\251\20\213\222\4\232fY\37\345u\307[5\35r\263"
 #"=L\3726\302\232y\332\265\304m\r"
 #"R\253\271\245\375\255\312\b\277d\337\232"
 #"\3661\2171\202\351/\361a\365\202\336"
 #"\203\n@\305C\317\307\366\303\nNz"
 #"\223\320\214\223\362\323\251\20\213\222\4j"
 #"gY\227\346ug\362\270\225g<~7\205Z3O\273\36\25\323\215\v3\336"
 #"-WQ\24h\3131\202\302\354\355\252\214\360K\366\255i\37\363\373=2}8"
 #"No?*2F&\34\3079\232\272\235\227\237NE"
 #":\237\321\375\375\367\337_\375\332\337|\363M\3747f"
) 500
(
 #"Y\323\0013\272\31]BD\22bQ\"\"\251\360\263o\255b\2265QV\347"
 #"3\272\377\345\277\276\272\3725\377\341\37"
 #"\273{\177S\265.?\37\1ft\267\202\3677\225\351\362\343\203\v\335D$\35"
 #"\26%\"\222\n\213\22\21I\205E\211"
 #"\210\244\302\242D\345.\236\251MT\216"
 #"E\251\226/`\375\376k\210o\277\206"
 #"\373\367\231C_\375\22\301\267_C\374"
 #"\376\227'\177B<\212\275\310\vH;"
 #"\16\360\367&\365>\17\226=\357M\212"
 #"\342\225\264u]\272\17,J\265\374\214"
 #"\345\237\177\6\0\30\277\375\362\350\210\376"
 #"\333/\241\2\b\377\374\177'\177B<\n\37K\245\32&\3420\374\375\207A\27"
 #"\2\242\306\aJ\353\236G$3\26\245"
 #"\232|\367/\321\210\346\327_\246>\t"
 #"\376\5\306\277\371\2\300'|p\177n\320j\24(\346d\252\222\267r\200TD"
 #"Fvk\236\243`\261T\206\366\341\274h\244\245\315| \376\264|\177\37\17R"
 #"\221\261]\231\251\235>5\333\217\246\327m\220UNw\213E\251\266OX\375\b"
 #"\0_b\224L\341\276\372k\f\377\6\300\217\237\32\247%\32QU:\n\246\217"
 #"jRAl@h\343)\35,\226\e\210\26}|%\260t\300\214\262\2527\361"
 #"I\345\231\330\325\231\332\345\375hz]\340\264\254r\272g,J'p\376\364\t"
 #"\300a\n\227L\335\274\370\347\215\304\341"
 #"l\373\301\222\267\202\243[x_\32e\2223\345\253\243*\23\273*S\273i?"
 #"jgq\327\315*\247{\306\242t\212?~JM\341\16S\267\325\37\317i\324"
 #"\300{K\337O\341\274\225\3}<,^\27R\247\330\4\26^\6JfzT"
 #"WI&v\255L\355\246\375h\222\305]7W\233\356\t\213\322IRS\270A"
 #"4u\v\377\343/\347\5\335#\331\326\347\31v"
 #"\350a\345\350\30W\345\266\252Sl\342m\224z3"
) 343
(
 #"\355\304\275\306J2\261kej7\355G\223,\356\372\271\332t?X\224N\264"
 #"\237\302\375\363/\240\342g\254\377\324d"
 #"\201;C\35b\254\373X>\235\230%\r\r\217UU$\331\36i\177\235\222L"
 #"\354\252L\355S\372q\312ucM\263"
 #"\312\351\276\260(\235*\231\302\1\300O"
 #"\237\260\374\237K4\252b8\326\341\373"
 #">\314y\305K\372\336$5\5\212\26"
 #"\217\213\242t\243}\310\242\335c\243\351UU&vU\246v\275~\234~\335H"
 #"\355\254r\272k\235\317\350\306\354?\257"
 #"~m\361\355\327W\277\246\334\230U\0160\243\e`t\t\21I\210E\211\210\244"
 #"\302\214n\222\0\263\312\351\200E\311\372"
 #"\247\253_R\261\256~I\242\233\321\371"
 #"\215\3\210d\323\365\347cg7\16\20"
 #"B x\375x\365\337\275\215k\322\355"
 #"\350\372\343\203\257\276\21\221tX\224\210H*,JD$\25\26%\"\222\n\213"
 #"\22\21I\205E\211\210\244\302\242DDRaQ\"\"\251\260(\21\221TX\224"
 #"\210H*,JD$\25\26%\"\222\n\213\22\21I\205E\211\210\244\302\242D"
 #"DRaQ\"\"\251\260(\21\221TX\224\210H*\312.|\3456\22D"
 #"$\215\377\ay\240\237dAQ\e3\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #"; AMB CONSTRUCTOR"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 22 #"compatibility/defmacro"
0 0 24 3 4 #")   "
0 0 17 3 35 #"; Required to support the amb macro"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"amb-fail"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"initialize-amb-fail"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"amb-fail"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"amb tree exhausted\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 19 #"initialize-amb-fail"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 1 #" "
0 0 14 3 3 #"amb"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 7 #"alts..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"+prev-amb-fail"
0 0 24 3 1 #" "
0 0 14 3 8 #"amb-fail"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"+sk"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"alt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"call/cc"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"+fk"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"amb-fail"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"amb-fail"
0 0 24 3 1 #" "
0 0 14 3 14 #"+prev-amb-fail"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"+fk"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"+sk"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"alt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 7 #"alts..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"+prev-amb-fail"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Function name: assert"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Pre-condition: It takes a predicate as its only parameter"
0 0 24 29 1 #"\n"
0 0 17 3 122
(
 #"; Post-condition: It asserts that the predicate evaluates to true. I"
 #"f it evaluatest to false, it calls the (amb) function."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"assert"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 3 #") ("
0 0 14 3 3 #"amb"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Function name: an-element-of"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; Pre-condition: It takes a list of items as its only parameter"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #"; Post-condition: It outputs a distinct element of the list everytim"
 #"e we call the function, through (amb) function. (exhausted)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"an-element-of"
0 0 24 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"amb"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 3 #") ("
0 0 14 3 13 #"an-element-of"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Function name: iterations-start-at"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Pre-condition: It takes a non-integer as its only parameter"
0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #"; Post-condition: It works as an increasing counter everytime we cal"
 #"l the function, through (amb) function."
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";                 No"
0 0 17 3 1 #" "
0 0 17 3 10 #"exhaustion"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 69
(
 #" the amb, because there's no upper bound to the number of iterations"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"iterations-start-at"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"amb"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 19 #"iterations-start-at"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; HELPER FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; Function name: position"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Pre-condition: It takes an element(atom) and a list"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Post-condition: It outputs the position of the element in the list"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";                 First element in the list --> position = 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"NOT FOUND!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Function name: last"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Pre-condition: It takes a list of atoms or list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Post-condition: It outputs the last element of the list (atom or l"
 #"ist)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; Function name: last-element-position"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Pre-condition: It takes a list of atoms or list of lists"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; Post-condition: It outputs the position of the last element of the"
 #" outer list."
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";                 "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"last-element-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 21 #"last-element-position"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Function name: find-begin-point"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Pre-condition: It takes a maze (Refer to Definitions section for t"
 #"he definition of \"maze\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Post-condition: It outputs a pair of zero and a positive integer  "
 #"--> (0 1), (0 3)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"find-begin-point"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; Function name: find-end-point"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; Pre-condition: It takes a maze (Refer to Definitions section for t"
 #"he definition of \"maze\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Post-condition: It outputs a pair of positive integers --> (4 1), "
 #"(5 4)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"find-end-point"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"bottom-border"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"bot-pos"
0 0 24 3 2 #" ("
0 0 14 3 21 #"last-element-position"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"bot-pos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 13 #"bottom-border"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Function name: new-position"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #"; Pre-condition: It takes a position and an atom (word). (Refer to D"
 #"efinitions section for the definition of \"position\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #"; Post-condition: It outputs a new position, based on the direction "
 #"given as a parameter --> (4 1), (5 4)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"right"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"forward"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"backward"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Undefined move!\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Function name: value-of-position"
0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #"; Pre-condition: It takes a position and a maze, where the position "
 #"has to be a valid pair that exists"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";                on"
0 0 17 3 1 #" "
0 0 17 3 7 #"calling"
0 0 17 3 2 #" ("
0 0 17 3 10 #"list-ref) "
0 0 17 3 6 #"inside"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 24 #"maze with that position."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 1 #"P"
0 0 17 3 1 #"o"
0 0 17 3 85
(
 #"st-condition: It outputs a value that represent this position in the"
 #" maze (0, 1 or 2)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"value-of-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Function name: same-position"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Pre-condition: It takes two valid positions."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 1 #"P"
0 0 17 3 115
(
 #"ost-condition: It evaluates, if two positions are the same, to true."
 #" Otherwise, it evaluates the function to false."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"same-position?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 9 #"position1"
0 0 24 3 1 #" "
0 0 14 3 9 #"position2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 9 #"position1"
0 0 24 3 1 #" "
0 0 14 3 9 #"position2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Function name: member"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Pre-condition: It takes an atom (e) and a list (s)."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 119
(
 #"Post-condition: It evaluates, if e is a member of the list (s), to t"
 #"rue. Otherwise, it evaluates the function to false."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Function name: exhausted-all"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Pre-condition: It takes a list of items."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 135
(
 #"Post-condition: It evaluates, if the first item is a repeated item i"
 #"n the list, to true. Otherwise, it evaluates the function to false."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"exhausted-all?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"items"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"member?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 2 #")("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Function name: change-value-in-list"
0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #"; Pre-condition: It takes a list of atoms, an index to an element in"
 #" the list and the new value (non-negative integer)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 117
(
 #"Post-condition: It outputs the list with the new value changed inste"
 #"ad of the old one at a certain index in the list."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"change-value-in-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 5 #"value"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 20 #"change-value-in-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Function name: change-value-in-maze"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #"; Pre-condition: It takes a maze, a valid position in the maze and t"
 #"he new value (non-negative integer)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 121
(
 #" Post-condition: It outputs the maze with the new value changed inst"
 #"ead of the old one at a certain position in the maze."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"change-value-in-maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #")) "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 3 #")) "
0 0 14 3 5 #"value"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Function name: multisubst"
0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #"; Pre-condition: It takes a list of atoms, an old value (non-negativ"
 #"e integer) and a new value (non-negative integer)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 92
(
 #"Post-condition: It changes all the occurences of the old value in th"
 #"e list to the new value."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 1 #" "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 3 #") ("
0 0 14 3 10 #"multisubst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lat"
0 0 24 3 2 #") "
0 0 14 3 3 #"old"
0 0 24 3 1 #" "
0 0 14 3 3 #"new"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Function name: permute"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Pre-condition: It takes a list of atoms or a list of lists."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 96
(
 #" Post-condition: It outputs a list containing all the permutations o"
 #"f the given list's elements."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"insert"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"insert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 3 #"seq"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"permute"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 4 #"(())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 6 #"insert"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 3 #"seq"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 7 #"permute"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Function name: random-maze-directions"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; Pre-condition: It takes a list of atoms or list of lists  --> '(le"
 #"ft right forward backward)."
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Post-condition: It outputs a random list from the permutations of "
 #"the given list."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"random-maze-directions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 15 #"directions-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"permutations"
0 0 24 3 2 #" ("
0 0 14 3 7 #"permute"
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"permutations"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 12 #"permutations"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #"; INITIALIZING VARIABLES"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"maze-directions"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"forward"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 8 #"backward"
0 0 24 3 13 #"))           "
0 0 17 3 39 #"; defines the list of maze directions. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"game-directions"
0 0 24 3 2 #" ("
0 0 14 3 22 #"random-maze-directions"
0 0 24 3 1 #" "
0 0 14 3 15 #"maze-directions"
0 0 24 3 3 #")) "
0 0 17 3 61
#";generates a random list of directions everytime it's called."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; MAIN MAZE FUNCTION"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; Function name: maze-game"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Pre-condition: It takes a previously-generated maze ."
0 0 24 29 1 #"\n"
0 0 17 3 134
(
 #"; Post-condition: It returns a list of positions that represent the "
 #"correct path, starting from the begin-point (position) of the maze"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";                 and ending with the end-point (position)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"maze-game"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 15 3 11 #"begin-point"
0 0 24 3 2 #" ("
0 0 14 3 16 #"find-begin-point"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-point"
0 0 24 3 2 #" ("
0 0 14 3 14 #"find-end-point"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 15 3 11 #"begin-point"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"previous-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 14 3 17 #"previous-position"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"num-iterations"
0 0 24 3 2 #" ("
0 0 14 3 19 #"iterations-start-at"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 1 #" "
0 0 14 3 15 #"game-directions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"next-move"
0 0 24 3 2 #" ("
0 0 14 3 13 #"an-element-of"
0 0 24 3 1 #" "
0 0 14 3 15 #"directions-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 17 #"previous-position"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 18 #"next-move-position"
0 0 24 3 2 #" ("
0 0 14 3 12 #"new-position"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 8 #"options)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 13 #"correct-path)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 19 #"Previous-position:)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 18 #"previous-position)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 18 #"Current-position:)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 17 #"current-position)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 11 #"Next-move:)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 10 #"next-move)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 20 #"Next-move-position:)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 19 #"next-move-position)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 19 #"------------------)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 8 #"newline)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"exhausted-all?"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 45 #";  (set! current-position (car correct-path))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-move"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"backward"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 15 3 11 #"begin-point"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 17 #"value-of-position"
0 0 24 3 1 #" "
0 0 14 3 18 #"next-move-position"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-position?"
0 0 24 3 1 #" "
0 0 14 3 18 #"next-move-position"
0 0 24 3 1 #" "
0 0 14 3 17 #"previous-position"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 18 #"next-move-position"
0 0 24 3 2 #") "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 17 #"previous-position"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 14 3 18 #"next-move-position"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"options"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-point"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 23 #"Number of iterations: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 14 #"num-iterations"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Correct path: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-point"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"DONE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; VISUALIZATION FUNCTIONS"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Function name: maze-visualized"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Pre-condition: It takes a previously-generated maze."
0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; Post-condition: It outputs a maze visualized with colored boxes. ("
 #"Refer to keymap in the beginning of the code)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"maze-visualized"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"one-list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 106
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0001IDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\0065\25e\272X\306D\27[F-\e\265l\324\262Q\313"
 #"F-\e\265l\324\262!`\31\0X\320\4+\213v.\373\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"two-list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multisubst"
0 0 24 3 1 #" "
0 0 14 3 8 #"one-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 119
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0>IDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\6Ue%\232[t\373\356=\6&\232\333\202\4F-\e"
 #"\265l\324\262Q\313F-\e\265l\3242\22\1\v\3\3\244\312\246\a"
 #"\0\0?\n\tVPB\377\30\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"multisubst"
0 0 24 3 1 #" "
0 0 14 3 8 #"two-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 106
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0001IDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\2063\247N\322\3052&\272\3302j\331\250e\243\226\215Z"
 #"6j\331\250e\243\226\r\1\313\0\336\334\6\35"
 #"j\357\300\251\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"maze-visualized"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; ------------------------------------------------------------------"
 #"-------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Function name: maze-visualized"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; Pre-condition: It takes a previously-generated maze."
0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; Post-condition: It outputs a maze visualized with colored boxes. ("
 #"Refer to keymap in the beginning of the code)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"replace-found-solution"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #") "
0 0 14 3 4 #"maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 16 #"current-position"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 200
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0\217IDATH\211\355\224=\16@@\20"
 #"F\37q\23tN\340\6\350\35\201\322U\324.\342\"*\326YV\301&\"!"
 #"\353g7\22^2\231-\276\311+f\262N/F\211%<\2000\360\255\310\\"
 #"+\226_\366\rY\t8\233jM\311\24\3 \201\30H\1aR\246\210Vr"
 #"\343\262n\351\211f\336\273\"\tW\357"
 #"\342\304\334\255\235\325@\303|8\306d"
 #"\212l\351\335a\352!\231:\214\\3"
 #"\377\310\316*\335\301^\214R\202\225z\357w\365\313\366\230\0"
 #"\322LIJ\334\221I\355\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 22 #"replace-found-solution"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 173
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0tIDATH\211c\274u\347\356\177\6"
 #":\1\26\6\6\6\6\265+\305t\261\214\211.\266\214Z6d-c!^\351"
 #"K\6\206\200\343\230\302n\226\f\fY"
 #"\342\324\266\f\n\324u\31\30:\225I"
 #"\326\306\3000\32g\310\340\346e\6\206\200\313P\2160\3\303t[\6\6IZ"
 #"Y6\32gX\0\205q\306@\253|&\316\300\260!\200D\227\241\202\341\e"
 #"g\303\3272\0\250;\22\354\247\356\0300\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 22 #"replace-found-solution"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 20 #"change-value-in-maze"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 16 #"current-position"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 2          13 4 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 304
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\e\0\0\0\25\b"
 #"\6\0\0\0\267\336\225%\0\0\0\367IDATH\211\355\225/\v\302P\24"
 #"G\217bZ\237\202E\203\330\0241Z\226\f\316b\362#\330m\373\16\6\r&"
 #"?\302\222\305\31L\26\243\210k:A\20\4}}u\206\371gZ|\2231D"
 #"\374\305\373\270\367\300y\227\367\22\eg"
 #"\347\21SR\0\305\341!\26X2\26"
 #"\312\37\366\3130\205\201\241\341\3655\254"
 #"\352\313Q6\317\266\257\341\31yj\321"
 #"\300\\\314\265\v@\243\242>\235\324**\5\300Y\237YD\3\203\205\265g\n"
 #"PR\351\334\253\n\355\262\2\bz\226+3F\366\316\4c\e@\245uS\231"
 #"M\323\314\0\266`$7D~AF+\1<T\336\24N\257\365Ha,E"
 #"@\345C\341x)=!\314\352\aT\352\276Bg\266\227V\30\22\26PY\317"
 #"Q\300e\262\222[\214\217`w\225\0'\201y\f\325\355\1771\362\21\350\335y"
 #"\270\226@\276\355\271\372\303\336\347\2c\364C\373"
 #"\211\49\212\0\0\0\0IEND\256B`\202"
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 22 #"replace-found-solution"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-maze"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 10 #"))))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; MAZE SAMPLES"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; Here are some previously-generated samples, so we can test the maz"
 #"e solver on them."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; ----------------"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; 3x3 MAZE"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; ----------------"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"3-3-maze"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 2          15 17 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           2 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\314\0\0\0\216\b"
 #"\6\0\0\0}\262\347\225\0\0\2TIDATx\234\355\335\261q\324P\24"
 #"@\321/f;\261\307M\230\b\32\200.\240\"S\6\24\0\21n\302c\327\""
 #"\"\23s\203\375\37\370\347\314(~\322"
 #"j\356j\223\267:\236\236_\316\1\374"
 #"\221\313\30c\334\335\336\254>\217\377\322"
 #"\212o\242c\301\314\235\274Y}\2\360/\21\f\4\202\201@0\20\b\6\2\301"
 #"@ \30\b\4\3\201` \20\f\4\202\201@0\20\b\6\2\301@ \30\b"
 #"\4\3\201` \20\f\4\202\201\340\262"
 #"\372\4f\371\371\375a\372\314\3071\306"
 #"\375\373\317\323\347r=\313\2360\347y"
 #"N=\2269\317\271\307\262\313\334\343~\372I\6\201` \20\f\4\202\201@0"
 #"\20\b\6\2\301@ \30\b\4\3\201` \20\f\4\202\201@0\20\b\6\2"
 #"\301@ \30\b\4\3\201` 8\236"
 #"\236_\316\273\333\233\251CW\354\327\277"
 #"\265[\1775;\335OO\30\b\4\3\201` \20\f\4\202\201@0\20\b\6"
 #"\2\301@ \30\b\4\3\201` \20\f\4\202\201@0\20\b\6\2\301@ "
 #"\30\b\4\3\201` X\262\323?\306"
 #"\232=\360\25f\357\236\373\\\257\353\262"
 #"d\352\30\343\376\335\247\251\363\36\177|"
 #"\231:\357\325\354w\312\257\272\316\331\367"
 #"s\f\177\202\1\177=\301@ \30\b\4\3\201` \20\f\4\202\201@0\20"
 #"\b\6\2\301@ \30\b\4\3\201` \20\f\4\202\201@0\20\b\6\2\301"
 #"@\260l\247\177\a;\275\277~\27\2360\20\b\6\2\301@ \30\b\4\3\201"
 #"` \20\f\4\202\201@0\20\b\6\2\301@ \30\b\4\3\201` \20\f"
 #"\4\202\201@0\20\b\6\2\301@\260\315N\377"
 #".\357\257_e\227\377\22\270\254\32\354\375\365\327\261"
) 153
(
 #"\352:g\337\317\3438\246\316{\345'\31\4\202\201@0\20\b\6\2\301@ "
 #"\30\b\4\3\201` \20\f\4\202\201@0\20\b\6\2\301@ \30\b\4\3"
 #"\201` \20\f\4\202\201`\331\212\362"
 #"\361\355\343\334\201\37\276\316\235\367\333\36"
 #"\273\356\273\\\247'\f\4\202\201@0\20\b\6\2\301@ \30\b\4\3\201`"
 #" \20\f\4\202\201@0\20\b\6\2\301@ \30\b\4\3\201` \20\f\4"
 #"\202\201@0\20\b\6\202_(\332\"c\231dhS\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; ----------------"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; 5x5 MAZE"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; ----------------"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"5-5-maze"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 2          17 17 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           3 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\1@\0\0\0\335\b"
 #"\6\0\0\0\312\37\253\203\0\0\4YIDATx\234\355\335\261m[K\20"
 #"@\321}\6;\261\341&\244H\252\300]H\25Ym\270\0+\262\2320\354Z"
 #"\336\217\230\377\204;\6\3579\200\342\341"
 #"r\251\213\307\204s\374\376\363\367\\\0"
 #"A\227\265\326\372\372\345\363\366\301\273\253"
 #"{l\236\a\374\373>M\277\0\200)\2\bd\t \220%\200@\226\0\2Y"
 #"\2\bd\t \220%\200@\226\0\2Y\2\bd\t \220%\200@\226\0\2"
 #"Y\2\bd\t \220%\200@\226\0\2Y\2\bd]\246_\300.\277~~"
 #"\37\231\373\370\374:2\367\336U\356\263"
 #"r\316)sO\200\347\271\367o\354\230"
 #"\347\326?\347tN\347\374\377|\5\6\262\4\20\310\22@ K\0\201,\1\4"
 #"\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310\22@ K\0\201,\1"
 #"\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310:~\377\371{~\375"
 #"\362y\372u\334\245\211}\16\23\273\34*\347\254(\335\247'@ K\0\201,"
 #"\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310\22@ K\0\201"
 #",\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310\22@ K\0"
 #"\201,\1\4\2622;A&\366\34L\230\332\255\340\375\275/\273\357s\352}\35"
 #"\v\340y\236[\347}\274\277m\235w"
 #"\365\360\364\262u\336q\34[\347]\271"
 #"\317\333\250\334\347\3249}\5\6\262\4\20\310\22@ K\0\201,\1\4\262\4"
 #"\20\310\22@ K\0\201,\1\4\262\4\20\310\22@ K\0\201,\1\4\262"
 #"\4\20\310\22@ K\0\201,\1\4\262\4\20\310\32\371I\374"
 #"\211\375\21\225]\16\334\216\317\355\375\361\4\bd\t \220%\200@"
) 500
(
 #"\226\0\2Y\2\bd\t \220%\200@\226\0\2Y\2\bd\t \220%\200"
 #"@\226\0\2Y\2\bd\t \220%\200@\226\0\2Y\2\bd\t \220%"
 #"\200@\326\310N\220\265\366\357W\250\354"
 #"V\230\330[\261\326\376\367w\352\234\25"
 #"\225\377\227\313\324\340\207\247\227\315\23g"
 #".\364<\317\255\363>\336\337\266\316\273"
 #"\252\234s\367\347\266r\237\307ql\235w\345+0\220%\200@\226\0\2Y\2"
 #"\bd\t \220%\200@\226\0\2Y\2\bd\t \220%\200@\226\0\2Y"
 #"\2\bd\t \220%\200@\226\0\2Y\2\bd\t \220%\200@\326\310N"
 #"\220\211}\16\23;\16*\347\254\250\334g\345\234ky\2\4\302\4\20\310\22@"
 #" K\0\201,\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310\22"
 #"@ K\0\201,\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310"
 #"\22@ \35321\364\361\371ud\357\300n\225sN\360\276\336N\351s;\262"
 #"\24i\255\265\316\363\334:\3578\216\255"
 #"\363\256\234\3636>\336\337\266\316\273z"
 #"xz\331:\257r\237S\347\364\25\30\310\22@ K\0\201,\1\4\262\4\20"
 #"\310\22@ K\0\201,\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4"
 #"\20\310\22@ K\0\201,\1\4\262\4\20\310\22@ k\344'\361'\366\r"
 #"<>\277n\237\351\234\2673q\316\212\322}z\2\4\262\4\20\310\22@ K"
 #"\0\201,\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310\22@ "
 #"K\0\201,\1\4\262\4\20\310\22@ K\0\201,\1\4\262\4\20\310\22@"
 #" kd'\310Z3{\a\n\246v+T\356\263\262\213d\367}N\275\257c"
 #"\1<\317s\353\274\217\367\267\255\363\256\36\236"
 #"^\266\316;\216c\353\274+\367y\e\225\373"
) 170
(
 #"\234:\247\257\300@\226\0\2Y\2\bd\t \220%\200@\226\0\2Y\2\b"
 #"d\t \220%\200@\226\0\2Y\2\bd\t \220%\200@\226\0\2Y\2"
 #"\bd\t \220%\200@\226\0\2Y\227\251\301S?\201\275_c\207\204\373\274"
 #"/\307\217o\323/a\vO\200@\226\0\2Y\2\bd\t \220%\200@\226"
 #"\0\2Y\2\bd\t \220%\200@\226\0\2Y\2\bd\t \220%\200@"
 #"\226\0\2Y\2\bd\t \220%\200@\226\0\2Y\2\bd\t "
 #"\220\365\37nDK\266\26fg\304\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; ----------------"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; 4x6 MAZE"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; ----------------"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"4-6-maze"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 2          17 17 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           3 500
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\1\6\0\0\1\5\b"
 #"\6\0\0\0\1\241I\222\0\0\4\202IDATx\234\355\334\301m#G\20"
 #"@\321\36\203\231HP\22\313\3232\2g\261\212HJ\303\1H')\tA\212"
 #"e|\22`\340\357\321\323m\223\357\1<\327\24I|\364\\z\373\370\374\332\a"
 #"\300?\234\306\30\343\341\376n\372\340\331"
 #"5\332&\317\203\377\263?V?\0\360\337#\f@\b\3\20\302\0\2040\0!"
 #"\f@\b\3\20\302\0\2040\0!\f@\b\3\20\302\0\2040\0!\f@\b"
 #"\3\20\302\0\2040\0!\f@\234V?\300,o/OK\346\236/\217K\346"
 #"^;\277\347\261\326\235\30\366}\356g"
 #"\331\232\373\324\217=\355\371o\360*\1\2040\0!\f@\b\3\20\302\0\2040"
 #"\0!\f@\b\3\20\302\0\2040\0!\f@\b\3\20\302\0\2040\0!\f"
 #"@\b\3\20\302\0\2040\0\261}|~\355\17\367w\253\237\343*\255\270\227p"
 #"\305\235\204\366<\316\252;&\235\30\200\20\6 \204\1\ba\0B\30\200\20\6"
 #" \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 \204\1"
 #"\ba\0B\30\200\20\6 \204\1\210\323\352\a\230e\305}}\267\342|y\274"
 #"\211\357\367V\366\34c\341e\260\373\276"
 #"O\235\367\376\372<u\336\267\37?\177"
 #"M\235\267m\333\324y\337f\377\236\366<\226W\t \204\1\ba\0B\30\200"
 #"\20\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 "
 #"\204\1\ba\0B\30\200\20\6 \204\1\210%W\273\255\2707\357|y\234>"
 #"\323\236\307\261\347\261\234\30\200\20\6 "
 #"\204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20"
 #"\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30"
) 500
(
 #"\200\20\6 \204\1\210%aXu\217"
 #"\335l\366\274.\267\262\347\30\213.\203"
 #"\35c\214}\337\247\316\333\266m\352\274o\366<\206=\217\345U\2\ba\0B"
 #"\30\200\20\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20"
 #"\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0\342\264b\350\333\313\323"
 #"x\177}^1z*{^\227[\331s\f'\6\3407\204\1\ba\0B\30"
 #"\200\20\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6"
 #" \204\1\ba\0B\30\200\20\6 \204\1\ba\0bI\30\316\227\307\25c"
 #"\247\263\347u\271\225=\307\30c\373\370"
 #"\374\332\37\356\357\246\17\336\367}\352\274"
 #"m\333\246\316\373f\317c\330\363X^%\200\20\6 \204\1\ba\0B\30\200"
 #"\20\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 "
 #"\204\1\ba\0B\30\200\20\6 N"
 #"+\206\276\275<\215\367\327\347\25\243\247"
 #"\262\347u\271\225=\307pb\0~C\30\200\20\6 \204\1\ba\0B\30\200"
 #"\20\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 "
 #"\204\1\ba\0B\30\200\20\6 \226\204\341|y\\1v:{^\227[\331"
 #"s\2141\266\217\317\257\375\341\376n\372"
 #"\340}\337\247\316\333\266m\352\274o\366"
 #"<\206=\217\345U\2\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20"
 #"\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 \204"
 #"\1\ba\0\342\264b\350\333\313\323x\177}^1z\272UWs\315t+\277"
 #"\347\255\3549\206\23\3\360\e\302\0\2040\0!\f@\b\3\20\302\0\2040\0"
 #"!\f@\b\3\20\302\0\2040\0!\f@\b\3\20\302\0\2040\0!\f@\b\3\20\302"
) 211
(
 #"\0\2040\0\261}|~\355\17\367w\323\a\277\275<M\237\271\302\371\3628u"
 #"\236\357\365X\263\277\337U{.\v\303"
 #"\276\357S\347\255\272\304\363\307\317_S"
 #"\347\335\312\236\253.\331\235\375\277]\265"
 #"\247W\t \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6"
 #" \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 \204\1"
 #"\210\323\252\301\253\256\254\232o\315\235}"
 #"\363\335\306\236\333_\177\256~\204)\234"
 #"\30\200\20\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20"
 #"\6 \204\1\ba\0B\30\200\20\6 \204\1\ba\0B\30\200\20\6 \204"
 #"\1\ba\0\342o0*\374\346\370\22\311\177\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #"; CALLING MAZE SOLVER WITH DIFFERENT SAMPLES"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 19 #"set! maze 3-3-maze)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";;("
0 0 17 3 33 #"set! maze (maze-visualized maze))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 34 #"correct-path (maze-game 3-3-maze))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 33 #"set! maze (maze-visualized maze))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(maze-visualized maze)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(replace-found-solution maze correct-path)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";(display '---------------------------------------------------------"
 #"-----------------)"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"(set! maze 5-5-maze)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(display maze)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"(set!"
0 0 17 3 1 #" "
0 0 17 3 34 #"correct-path (maze-game 5-5-maze))"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";(display \"PLAIN MAZE\\n\")"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";(maze-visualized maze)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";(display \"MAZE SOLVED\\n\")"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 34 #"(set! maze (maze-visualized maze))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(replace-found-solution maze correct-path)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";(display '---------------------------------------------------------"
 #"-----------------)"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"(set! maze 4-6-maze)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"(set!"
0 0 17 3 1 #" "
0 0 17 3 34 #"correct-path (maze-game 4-6-maze))"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";(display \"PLAIN MAZE\\n\")"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";(maze-visualized maze)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";(display \"MAZE SOLVED\\n\")"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";(display \";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;\\n\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 34 #"(set! maze (maze-visualized maze))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(replace-found-solution maze correct-path)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";(newline)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #"; CALLING RANDOMLY-BUILT MAZE"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 74
(
 #"--------------------------------------------------------------------"
 #"------"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-maze"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 65
#"\";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"PLAIN MAZE\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 65
#"\";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"maze-visualized"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 2 #" ("
0 0 14 3 9 #"maze-game"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 65
#"\";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"MAZE SOLVED\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 65
#"\";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 2 #" ("
0 0 14 3 15 #"maze-visualized"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 22 #"replace-found-solution"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-maze"
0 0 24 3 1 #" "
0 0 14 3 12 #"correct-path"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #"; END OF FILE"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;"
) 0           0
